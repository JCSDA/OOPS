# oops-import.cmake

include(CMakeFindDependencyMacro)

#Export enabled toymodels component availability (boolean)
set(oops_qg_FOUND @ENABLE_QG_MODEL@) #COMPONENT qg
set(oops_lorenz95_FOUND @ENABLE_LORENZ95_MODEL@) #COMPONENT lorenz95

if( @MKL_FOUND@ )
    find_dependency( MKL REQUIRED )
    set( LAPACK_LIBRARIES ${MKL_LIBRARIES} )
else()
    find_dependency( LAPACK REQUIRED )
endif()

find_dependency( Eigen3 REQUIRED NO_MODULE HINTS
    $ENV{Eigen3_ROOT} $ENV{EIGEN3_ROOT} $ENV{Eigen_ROOT} $ENV{EIGEN_ROOT}
    $ENV{Eigen3_PATH} $ENV{EIGEN3_PATH} $ENV{Eigen_PATH} $ENV{EIGEN_PATH} )

if(@OpenMP_FOUND@)
    find_package( OpenMP REQUIRED COMPONENTS CXX Fortran )
endif()
find_package( MPI REQUIRED COMPONENTS CXX Fortran )
find_package( NetCDF REQUIRED COMPONENTS Fortran )
find_dependency( Boost REQUIRED )
find_package( eckit REQUIRED COMPONENTS MPI )
find_dependency( fckit REQUIRED )
if(@OpenMP_FOUND@)
    find_package( atlas REQUIRED COMPONENTS OMP OMP_Fortran )
else()
    find_dependency( atlas REQUIRED )
endif()

#Export Fortran compiler version for checking module compatibility
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID @CMAKE_Fortran_COMPILER_ID@)
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION @CMAKE_Fortran_COMPILER_VERSION@)
if(NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_ID STREQUAL CMAKE_Fortran_COMPILER_ID
   OR NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION VERSION_EQUAL CMAKE_Fortran_COMPILER_VERSION)
    message(SEND_ERROR "Package @PROJECT_NAME@ provides Fortran modules built with "
            "${@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID}-${@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION} "
            "but this build for ${PROJECT_NAME} uses incompatible compiler ${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}")
endif()
